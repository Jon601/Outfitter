package model;

import java.util.*;

import model.Event;
import model.EventLog;
import org.json.JSONArray;
import org.json.JSONObject;
import persistence.Wrote;

public class Closet implements Wrote {

    private String name = "name";
    private SubCloset out = new SubCloset(1);
    private SubCloset in = new SubCloset(2);
    private SubCloset shoe = new SubCloset(3);
    private SubCloset acc = new SubCloset(4);
    private SubCloset pant = new SubCloset(5);
    private List<Outfit> fits = new ArrayList<>();

    // Constructs a closet
    // EFFECTS: sets up an empty closet that has 5 subclosets and 1 list for past outfits
    public Closet(String name, SubCloset out, SubCloset in, SubCloset shoe, SubCloset acc, SubCloset pant,
                  List<Outfit> fits) {
        this.name = name;
        this.out = out;
        this.in = in;
        this.acc = acc;
        this.pant = pant;
        this.shoe = shoe;
        this.fits = fits;
    }

    // Makes a new outfit from strings
    // EFFECTS: compiles separate strings of clothing names into longer string and outfit,
    // saves outfit to list of outfits
    public String makeOutfit(String name, String outer, String inner,
                             String shoes, String acc, String pants, int rating) {
        this.fits.add(new Outfit(name, (outer + ", " + inner + ", " + shoes + ", " + acc + ", and " + pants), rating));
        Event man = new Event("Manually created outfit added to Closet");
        EventLog.getInstance().logEvent(man);
        return "Your " + name + " outfit has " + outer + ", " + inner + ", " + shoes + ", " + acc + ", and " + pants;
    }

    // Changes a given outfit to have a new name, contents, and rating
    // MODIFIES: this.fits
    // EFFECTS: takes given name of outfit and replaces that outfit in fits with a new one
    public void setOutfit(String old, String name, String contents, int rating) {
        for (int x = 0; x < fits.size(); x++) {
            if (fits.get(x).getName().equals(old)) {
                fits.remove(x);
                fits.add(x, new Outfit(name, contents, rating));
                Event set = new Event("An outfit was edited");
                EventLog.getInstance().logEvent(set);
            }
        }
    }

    // Generates a new outfit based on similar color
    // EFFECTS: generates a piece of clothing based on color from each subcloset,
    // compiles their desc into longer string and outfit, saves outfit to list of outfits
    public String genColorOutfit(String name, String color, int rating) {
        this.fits.add(new Outfit(name, (out.genColor(color) + ", " + in.genColor(color) + ", "
                + shoe.genColor(color) + ", " + acc.genColor(color) + ", and " + pant.genColor(color)), rating));
        Event genc = new Event("Outfit generated by color and added to Closet");
        EventLog.getInstance().logEvent(genc);
        return "Your " + name + " (" + color + ")" + " outfit has "
                + out.genColor(color) + ", " + in.genColor(color) + ", " + shoe.genColor(color)
                + ", " + acc.genColor(color) + ", and " + pant.genColor(color);
    }

    // Generates a new outfit based on similar occasion
    // EFFECTS: generates a piece of clothing based on occasion from each subcloset,
    // compiles their desc into longer string and outfit, saves outfit to list of outfits
    public String genOccasionOutfit(String name, String occasion, int rating) {
        this.fits.add(new Outfit(name, (out.genOccasion(occasion) + ", " + in.genOccasion(occasion) + ", "
                + shoe.genOccasion(occasion) + ", " + acc.genOccasion(occasion) + ", and "
                + pant.genOccasion(occasion)), rating));
        Event geno = new Event("Outfit generated by occasion and added to Closet");
        EventLog.getInstance().logEvent(geno);
        return "Your " + name + " (" + occasion + ")" + " outfit has "
                + out.genOccasion(occasion) + ", " + in.genOccasion(occasion) + ", " + shoe.genOccasion(occasion)
                + ", " + acc.genOccasion(occasion) + ", and " + pant.genOccasion(occasion);
    }

    // Generates a new outfit based on similar weather
    // EFFECTS: generates a piece of clothing based on weather from each subcloset,
    // compiles their desc into longer string and outfit, saves outfit to list of outfits
    public String genWeatherOutfit(String name, String weather, int rating) {
        this.fits.add(new Outfit(name, (out.genWeather(weather) + ", " + in.genWeather(weather) + ", "
                + shoe.genWeather(weather) + ", " + acc.genWeather(weather) + ", and "
                + pant.genWeather(weather)), rating));
        Event genw = new Event("Outfit generated by weather and added to Closet");
        EventLog.getInstance().logEvent(genw);
        return "Your " + name + " (" + weather + ")" + " outfit has "
                + out.genWeather(weather) + ", " + in.genWeather(weather) + ", " + shoe.genWeather(weather)
                + ", " + acc.genWeather(weather) + ", and " + pant.genWeather(weather);
    }

    // Generates a new piece of clothing to a given subcloset
    // MODIFIES: this
    // EFFECTS: based on string given, adds clothing to a certain subscloset
    public void addClothing(String s, String col, String des, String oc, String we, int ra) {
        if (s.equals("Accessory")) {
            Accessory a = new Accessory(col, des, oc, we, ra);
            acc.addClothing(a);
            Event adda = new Event("Accessory added to Closet");
            EventLog.getInstance().logEvent(adda);
        }
        if (s.equals("Innerwear")) {
            Innerwear a = new Innerwear(col, des, oc, we, ra);
            in.addClothing(a);
            Event addi = new Event("Innerwear added to Closet");
            EventLog.getInstance().logEvent(addi);
        }
        addClothing1(s, col, des, oc, we, ra);
    }

    // addClothing continued
    public void addClothing1(String s, String col, String des, String oc, String we, int ra) {
        if (s.equals("Outerwear")) {
            Outerwear a = new Outerwear(col, des, oc, we, ra);
            out.addClothing(a);
            Event addo = new Event("Outerwear added to Closet");
            EventLog.getInstance().logEvent(addo);
        }
        if (s.equals("Pants")) {
            Pants a = new Pants(col, des, oc, we, ra);
            pant.addClothing(a);
            Event addp = new Event("Pants added to Closet");
            EventLog.getInstance().logEvent(addp);
        }
        if (s.equals("Shoes")) {
            Shoe a = new Shoe(col, des, oc, we, ra);
            shoe.addClothing(a);
            Event adds = new Event("Shoes added to Closet");
            EventLog.getInstance().logEvent(adds);
        }
    }

    // Shows all saved outfits in the form of a string
    // EFFECTS: reads list of outfits and returns their names, contents, and ratings in a string
    public String showOutfits() {
        String all = "";
        for (int x = 0; x < fits.size(); x++) {
            all += "<" + Integer.toString(x + 1) + "> " + fits.get(x).getName() + ": "
                    + fits.get(x).getContents() + " Rating: "
                    + fits.get(x).getRating() + "   ";
        }
        return all;
    }

    // Adds outfit to closet
    // EFFECTS: adds outfit to list of outfits
    public void addOutfit(Outfit s) {
        this.fits.add(s);
    }

    public SubCloset getOuterwear() {
        return out;
    }

    public SubCloset getInnerwear() {
        return in;
    }

    public SubCloset getAccessory() {
        return acc;
    }

    public SubCloset getPants() {
        return pant;
    }

    public SubCloset getShoes() {
        return this.shoe;
    }

    public String getName() {
        return this.name;
    }

    public List<Outfit> getFits() {
        return this.fits;
    }

    @Override
    // Writes all contents into Json
    // EFFECTS: returns closet as a JSON object
    public JSONObject intoJson() {
        JSONObject j = new JSONObject();
        j.put("name", name);
        j.put("Out", outIntoJson());
        j.put("In", inIntoJson());
        j.put("Shoe", shoeIntoJson());
        j.put("Acc", accIntoJson());
        j.put("Pant", pantIntoJson());
        j.put("Fits", fitsIntoJson());
        return j;
    }

    // Converts all outfits to Json
    // EFFECTS: returns outfits in this closet as a JSON array
    private JSONArray fitsIntoJson() {
        JSONArray jsonArray = new JSONArray();

        for (Outfit t : fits) {
            jsonArray.put(t.intoJson());
        }

        return jsonArray;
    }

    // Converts all innerwear to Json
    // EFFECTS: returns innerwear in this closet as a JSON array
    private JSONArray inIntoJson() {
        JSONArray jsonArray = new JSONArray();

        for (Clothing t : in.getClothing()) {
            jsonArray.put(t.intoJson());
        }

        return jsonArray;
    }

    // Converts all outerwear to Json
    // EFFECTS: returns outerwear in this closet as a JSON array
    private JSONArray outIntoJson() {
        JSONArray jsonArray = new JSONArray();

        for (Clothing t : out.getClothing()) {
            jsonArray.put(t.intoJson());
        }

        return jsonArray;
    }

    // Converts all shoes to Json
    // EFFECTS: returns shoes in this closet as a JSON array
    private JSONArray shoeIntoJson() {
        JSONArray jsonArray = new JSONArray();

        for (Clothing t : shoe.getClothing()) {
            jsonArray.put(t.intoJson());
        }

        return jsonArray;
    }

    // Converts all accessories to Json
    // EFFECTS: returns accessories in this closet as a JSON array
    private JSONArray accIntoJson() {
        JSONArray jsonArray = new JSONArray();

        for (Clothing t : acc.getClothing()) {
            jsonArray.put(t.intoJson());
        }

        return jsonArray;
    }

    // Converts all pants to Json
    // EFFECTS: returns pants in this closet as a JSON array
    private JSONArray pantIntoJson() {
        JSONArray jsonArray = new JSONArray();

        for (Clothing t : pant.getClothing()) {
            jsonArray.put(t.intoJson());
        }

        return jsonArray;
    }
}
